{
  "name": "updown",
  "version": "0.1.4",
  "description": "Monitor service with user interface",
  "main": "index.js",
  "scripts": {
    "install": "./node_modules/coffee-script/bin/cake install",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/chenko/updown.git"
  },
  "keywords": [
    "monitor",
    "uptime",
    "dashboard"
  ],
  "dependencies": {
    "express": "3.2.0",
    "jade": "0.26.3",
    "stylus": "0.27.2",
    "moment": "*",
    "coffee-script": "1.6.2",
    "cron": "~1.0.1",
    "nodemailer": "*",
    "request": "*"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "author": {
    "name": "chenka"
  },
  "license": "BSD",
  "gitHead": "cc477c0379ecdfd452c2d272f57aa2d14907b284",
  "readme": "\n\n# Updown\n\nRemote monitoring and dashboard for your Express apps.\n\n## User-Interface\n  ![updown logo](http://oi39.tinypic.com/301cxg0.jpg \"updown interface\")\n\n## Installation\n\n    $ npm install updown\n\n\n\n## Usage\nFirst create service with `updown.createService()`\n\nYou must pass option `ping:true` for simply check service status\n\n```js\ngoogle = updown.createService('Google Service', {\n  url: 'http://www.google.com',\n  ping: true\n});\n```\n\n### Cronjob\nTo specify time to check service status, simply pass the `cronTime` option with cron job format\n\n```js\ngoogle = updown.createService('Check Google Uptime', {\n  url: 'http://www.google.com',\n  cronTime: '00 30 11 * * 1-5'\n  ping: true\n  // Runs every weekday (Monday through Friday)\n  // at 11:30:00 AM. It does not run on Saturday sor Sunday.\n});\n```\n### Available Cron patterns\n\n    Asterisk. E.g. *\n    Ranges. E.g. 1-3,5\n    Steps. E.g. */2\n    \n### Cron example\n    */10 * * * * 1-2  Run every 10 seconds on Monday and Tuesday\n    00 */2 * * * *  Run every 2 minutes everyday\n    00 30 09-10 * * * Run at 09:30 and 10:30 everyday\n    00 30 08 10 06 * Run at 08:30 on 10th June\n\n    * Use 0 for Sunday\n\n[Read more cron patterns here](http://www.thegeekstuff.com/2009/06/15-practical-crontab-examples/).\n\n\n## Events\n  The following events are currently supported:\n\n      - `success` when service has up\n      - `error` when service has down\n\n  For example this may look something like the following:\n\n```js\ngoogle.on('error', function(){\n  doSomethingWhenServiceDown()\n  console.log('google has service down')\n});\n\ngoogle.on('success', function(){\n  doSomethingWhenServiceUp()\n  console.log('google has service up')\n});\n```\n\n## Processing Service\n  To processing service. First create service instance and don't pass `ping` option, Updown not use `url` option\nto ping service status, so you can pass not only url but also pass string or service name you want.\n\n  we invoke `done.error()` for service has down and `done.success()` when service has up\n\n```js\ndatabase = updown.createService('Backup Database', {\n  url: 'Some instance on Amazon EC2',\n  cronTime: '00 */5 * * * *'\n});\n\ndatabase.process(function(done) {\n  requestToDatabaseServer(function(err,data){\n    if(err){\n      done.error()\n    }else{\n      done.success()\n    }\n  });\n});\n\n```\n  You can pass object or string parameter to tell Updown what is response when processing service\nto show up on web UI\n\n```js\ndatabase.process(function(done) {\n  requestToDatabaseServer(function(err,data){\n    if(err){\n      done.error('Database not found.')\n    }else{\n      done.success({\n        filename: data.databaseName,\n        size: data.databaseSize,\n        createDate: data.createDate\n      })\n\n    }\n  });\n});\n\n```\n\n  On web interface when you pass data to `done.success(data)` or `done.error(data)`\n![updown](http://i.imgur.com/UbIq0fy.png)\n\n## Send Mail\n  Calling `updown.mailConfig()` with SMTP config to send mail when service change status from up to down\n\n```js\nupdown.mailConfig({\n  service: \"Gmail\",\n  auth: {\n      user: \"gmail.user@gmail.com\",\n      pass: \"userpass\"\n  }\n});\n```\n\n  Pass the `sendmail` option for service you want to send mail.\n\n```js\ngoogle = updown.createService('Check Google Uptime', {\n  url: 'http://www.google.com',\n  ping: true\n  sendmail: true\n});\n```\n\n## Connect with Express\n  Incorporate updown into your express app in just one step.\n\nAdd the Middleware to express\n\n```js\nexpress = require(\"express\");\napp = express();\napp.use(updown.middleware());\napp.listen(3000);\n```\n\n## Example Application\n  There is an example application at [./example](https://github.com/chenko/updown/tree/master/example)\nTo run it:\n\n    $ cd example\n    $ node server.js\n\n\n## Securing updown\n  Add authentication for your app by adding additional middleware like Connect's `basicAuth()`\n\n```js\napp.use(express.basicAuth('testUser', 'testPass'));\n```\n\n\n## API\n\n`updown.createService( name, options)`\n\n  * `url` - [REQUIRED] - The service location.\n  * `ping` - [OPTIONAL] - Simply ping the url. don't use this option when use `updown.process()`.\n  * `cronTime` - [OPTIONAL] - defaults to `00 */1 * * * *` run every 1 minutes.\n\n`updown.setPath(path)`\n\n  Set path to web interface. defaults is root path `'/'`.\n\n## TODO\n* Use Socket.io to update service status.\n* Display both local and server time",
  "readmeFilename": "README.md",
  "_id": "updown@0.1.4",
  "dist": {
    "shasum": "80c239e24687c372e3045607ec4760e6c9c2c1be",
    "tarball": "http://registry.npmjs.org/updown/-/updown-0.1.4.tgz"
  },
  "_from": "updown@",
  "_npmVersion": "1.2.11",
  "_npmUser": {
    "name": "chenka",
    "email": "salanyot@gmail.com"
  },
  "maintainers": [
    {
      "name": "chenka",
      "email": "salanyot@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "80c239e24687c372e3045607ec4760e6c9c2c1be",
  "_resolved": "https://registry.npmjs.org/updown/-/updown-0.1.4.tgz",
  "bugs": {
    "url": "https://github.com/chenko/updown/issues"
  },
  "homepage": "https://github.com/chenko/updown"
}
